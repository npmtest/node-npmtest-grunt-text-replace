{"/home/travis/build/npmtest/node-npmtest-grunt-text-replace/test.js":"/* istanbul instrument in package npmtest_grunt_text_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-text-replace/lib.npmtest_grunt_text_replace.js":"/* istanbul instrument in package npmtest_grunt_text_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_text_replace = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_text_replace = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-text-replace/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-text-replace && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_text_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_text_replace\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_text_replace.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_text_replace.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_text_replace.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_text_replace.__dirname +\n                    '/lib.npmtest_grunt_text_replace.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-text-replace/node_modules/grunt-text-replace/Gruntfile.js":"module.exports = function(grunt) {\n\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n\n    replace: {\n      example: {\n        src: ['test/text_files/example.txt'],\n        dest: 'test/modified/',\n        replacements: [{\n          from: 'Hello',\n          to: 'Good bye'\n        }, {\n          from: /(f|F)(o{2,100})/g,\n          to: 'M$2'\n        }, {\n          from: /\"localhost\"/,\n          to: function (matchedWord, index, fullText, regexMatches) {\n            return '\"www.mysite.com\"';\n          }\n        }, {\n          from: '<p>Version:</p>',\n          to: '<p>Version: <%= grunt.template.date(\"18 Feb 2013\", \"yyyy-mm-dd\") %></p>'\n        }, {\n          from: /[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2,4}/g,\n          to: function() {\n            return \"<%= grunt.template.date('18 Feb 2013', 'dd/mm/yyyy') %>\";\n          }\n        }]\n      },\n\n      overwrite: {\n        src: ['test/modified/example.txt'],\n        overwrite: true,\n        replacements: [{\n          from: 'World',\n          to: 'PLANET'\n        }]\n      },\n\n      disable_template_processing: {\n        src: ['test/text_files/template-example.txt'],\n        dest: 'test/modified/',\n        options: {\n          processTemplates: false\n        },\n        replacements: [{\n          from: /url\\(.*\\)/g,\n          to: function () {\n            return \"url(<% some unprocessed text %>)\";\n          }\n        }]\n      }\n\n    },\n\n    nodeunit: {\n      errors: ['test/text-replace-error-tests.js'],\n      tests: ['test/text-replace-unit-tests.js'],\n      replace: ['test/text-replace-functional-tests.js'],\n    },\n\n  });\n\n  grunt.loadTasks('tasks');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  grunt.registerTask('default', ['jshint', 'test']);\n\n/*\n    A note on testing (ie. running: grunt test):\n\n    There are two kinds of tests:\n\n    - Tests that don't result in a warning\n    - Test that do result in a warning (grunt.warn())\n\n    I haven't been able to find a convenient way of testing for grunt.warn()\n    events without enabling '--force' when running grunt. For this reason I've\n    set up the 'test' task to just run the main tests, and only if --force is on\n    to run the error-throwing tests.\n\n*/\n\n  grunt.registerTask('test', function () {\n    var isForceOn = grunt.option('force') || false;\n    var taskList = ['nodeunit:tests'];\n    if (isForceOn) {\n      taskList.push('nodeunit:errors');\n    }\n    taskList.push('replace');\n    taskList.push('nodeunit:replace');\n    grunt.task.run(taskList);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-text-replace/node_modules/grunt-text-replace/lib/grunt-text-replace.js":"var grunt = require('grunt');\nvar path = require('path');\nvar gruntTextReplace = {};\n\n\nexports.replace = function (settings) {\n  gruntTextReplace.replace(settings);\n}\n\nexports.replaceText = function (settings) {\n  var text = settings.text;\n  var replacements = settings.replacements;\n  return gruntTextReplace.replaceTextMultiple(text, replacements);\n}\n\nexports.replaceFile = function (settings) {\n  return gruntTextReplace.replaceFile(settings)\n}\n\nexports.replaceFileMultiple = function (settings) {\n  return gruntTextReplace.replaceFileMultiple(settings)\n}\n\n\n\ngruntTextReplace = {\n  replaceFileMultiple: function (settings) {\n    var sourceFiles = grunt.file.expand(settings.src);\n    sourceFiles.forEach(function (pathToSource) {\n      gruntTextReplace.replaceFile({\n        src: pathToSource,\n        dest: settings.dest,\n        replacements: settings.replacements\n      });\n    });\n  },\n\n  replaceFile: function (settings) {\n    var pathToSourceFile = settings.src;\n    var pathToDestinationFile = this.getPathToDestination(pathToSourceFile, settings.dest);\n    var replacements = settings.replacements;\n    var isThereAGenuineReplacement = replacements.reduce(function (previous, current) { \n      return previous || (current.from !== current.to) \n    }, false);\n    var isReplacementRequired = (pathToSourceFile !== pathToDestinationFile) || isThereAGenuineReplacement\n    if (isReplacementRequired) {\n      grunt.file.copy(pathToSourceFile, pathToDestinationFile, {\n        process: function (text) {\n          return gruntTextReplace.replaceTextMultiple(text, replacements);\n        }\n      });\n    }\n  },\n\n  replaceTextMultiple: function (text, replacements) {\n    return replacements.reduce(function (newText, replacement) {\n      return gruntTextReplace.replaceText({\n        text: newText,\n        from: replacement.from,\n        to: replacement.to\n      });\n    }, text);\n  },\n\n  replaceText: function (settings) {\n    var text = settings.text;\n    var from = this.convertPatternToRegex(settings.from);\n    var to = this.expandReplacement(settings.to);\n    return text.replace(from, to);\n  },\n\n  replace: function (settings) {\n    var src = grunt.file.expand(settings.src || []);\n    var dest = settings.dest;\n    var overwrite = settings.overwrite;\n    var replacements = settings.replacements;\n    var isDestinationDirectory = (/\\/$/).test(dest);\n    var initialWarnCount = grunt.fail.warncount;\n\n    if (typeof dest === 'undefined' &&\n        typeof src === 'undefined' &&\n        typeof replacements === 'undefined') {\n      grunt.warn(gruntTextReplace.errorMessages.noTargetsDefined);\n    } else if (typeof dest === 'undefined' && overwrite !== true) {\n      grunt.warn(gruntTextReplace.errorMessages.noDestination);\n    } else if (typeof replacements === 'undefined') {\n      grunt.warn(gruntTextReplace.errorMessages.noReplacements);\n    } else if (typeof dest !== 'undefined' && overwrite === true) {\n      grunt.warn(gruntTextReplace.errorMessages.overwriteFailure);\n    } else if ((isDestinationDirectory === false && src.length > 1) && overwrite !== true) {\n      grunt.warn(gruntTextReplace.errorMessages.multipleSourceSingleDestination);\n    } else if (grunt.fail.warncount - initialWarnCount === 0) {\n      gruntTextReplace.replaceFileMultiple({\n        src: src,\n        dest: dest,\n        replacements: replacements\n      });\n    }\n  },\n\n  errorMessages: {\n    noTargetsDefined: \"No targets were found. Remember to wrap functionality \" +\n      \"within a target.\",\n    noDestination: \"Destination is not defined! If you want to overwrite \" +\n      \"files, then make sure to set overwrite: true. If you don't wish to \" +\n      \"overwrite, then make sure to set a destination\",\n    noReplacements: \"No replacements were found.\",\n    overwriteFailure: \"Overwrite is to true, but a destination has also \" +\n      \"been defined. If you want to overwrite files, remove the destination. \" +\n      \"If you want to send files to a destination, then ensure overwrite is \" +\n      \"not set to true\",\n    multipleSourceSingleDestination: \"Cannot write multiple files to same \" +\n      \"file. If you wish to export to a directory, make sure there is a \" +\n      \"trailing slash on the destination. If you wish to write to a single \" +\n      \"file, make sure there is only one source file\"\n  },\n\n  getPathToDestination: function (pathToSource, pathToDestinationFile) {\n    var isDestinationDirectory = (/\\/$/).test(pathToDestinationFile);\n    var fileName = path.basename(pathToSource);\n    var newPathToDestination;\n    if (typeof pathToDestinationFile === 'undefined') {\n      newPathToDestination = pathToSource;\n    } else {\n      newPathToDestination = pathToDestinationFile + (isDestinationDirectory ? fileName : '');\n    }\n    return newPathToDestination;\n  },\n\n  convertPatternToRegex: function (pattern) {\n    var regexCharacters = '\\\\[](){}^$-.*+?|,/';\n    if (typeof pattern === 'string') {\n      regexCharacters.split('').forEach(function (character) {\n        var characterAsRegex = new RegExp('(\\\\' + character + ')', 'g');\n        pattern = pattern.replace(characterAsRegex, '\\\\$1');\n      });\n      pattern = new RegExp(pattern, 'g');\n    }\n    return pattern;\n  },\n\n  expandReplacement: function (replacement) {\n    if (typeof replacement === 'function') {\n      return this.expandFunctionReplacement(replacement);\n    } else if (typeof replacement === 'string') {\n      return this.expandStringReplacement(replacement);\n    } else {\n      return gruntTextReplace.expandNonStringReplacement(replacement);\n    }\n  },\n\n  expandFunctionReplacement: function (replacement) {\n    return function () {\n      var matchedSubstring = arguments[0];\n      var index = arguments[arguments.length - 2];\n      var fullText = arguments[arguments.length - 1];\n      var regexMatches = Array.prototype.slice.call(arguments, 1,\n        arguments.length - 2);\n      var returnValue = replacement(matchedSubstring, index, fullText,\n        regexMatches);\n      return (typeof returnValue === 'string') ?\n        gruntTextReplace.processGruntTemplate(returnValue) :\n        gruntTextReplace.expandNonStringReplacement(returnValue);\n    };\n  },\n\n  expandStringReplacement: function (replacement) {\n    return gruntTextReplace.processGruntTemplate(replacement);\n  },\n\n  expandNonStringReplacement: function (replacement) {\n    var isReplacementNullOrUndefined = (typeof replacement === 'undefined') || (replacement === null);\n    return isReplacementNullOrUndefined ? '' : String(replacement);\n  },\n\n  processGruntTemplate: function (string) {\n    var isProcessTemplateTrue = true;\n    if (grunt.task.current.data &&\n        grunt.task.current.data.options &&\n        typeof grunt.task.current.data.options.processTemplates !== 'undefined' &&\n        grunt.task.current.data.options.processTemplates === false) {\n      isProcessTemplateTrue = false;\n    }\n    return isProcessTemplateTrue ? grunt.template.process(string) : string;\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-text-replace/node_modules/grunt-text-replace/tasks/text-replace.js":"/*\n * grunt-text-replace\n * https://github.com/Yoni/grunt-4-test\n *\n * Copyright (c) 2013 Jonathan Holmes\n * Licensed under the MIT license.\n */\n\nvar gruntTextReplace = require('../lib/grunt-text-replace');\n\nmodule.exports = function(grunt) {\n\n\n\n  // Please see the grunt documentation for more information regarding task\n  // creation: https://github.com/gruntjs/grunt/blob/devel/docs/toc.md\n\n  grunt.registerMultiTask('replace',\n    'General purpose text replacement for grunt. Allows you to replace ' +\n    'text in files using strings, regexs or functions.',\n    function () {\n      gruntTextReplace.replace({\n        src: this.data.src,\n        dest: this.data.dest,\n        overwrite: this.data.overwrite,\n        replacements: this.data.replacements\n      });\n    });\n};\n"}